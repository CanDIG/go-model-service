### This Dockerfile generates the stack/dependency-containing image that is
### pulled by the main Dockerfile of the v1 go-model-service app.

# Build from project root with:
# 	docker build -t <docker-username>/gms-stack-v1 -f ./alt-install/Dockerfile-gms-stack-v1 .
# Run resulting container from project root with:
# 	docker run -it --rm <docker-username>/gms-stack-v1
# Push to docker hub:
# 	docker login && docker push <docker-username>/gms-stack-v1

# TODO is GOPATH going to cause us issues?

# Build stage
FROM golang

WORKDIR /
ENV GOPATH=/go

# Install sqlite3 (database backend)
RUN apt-get update && apt-get install -y \
	sqlite3 \
	libsqlite3-dev

# Install dep (managing project dependencies from Go import statements)
RUN curl https://raw.githubusercontent.com/golang/dep/master/install.sh \
	| sh

# Install Go-swagger (code-gen of boilerplate server Go code from OpenAPI definition)
RUN curl -o $GOPATH/bin/swagger -L'#' \
	https://github.com/go-swagger/go-swagger/releases/download/0.16.0/swagger_linux_amd64
RUN chmod +x $GOPATH/bin/swagger


# Install pop (ORM-like for interfacing with the database backend)
# Note the use of `-tags sqlite` in the install statement for the soda CLI
RUN go get -u -v -tags sqlite \
	github.com/gobuffalo/pop/...
# soda is the pop CLI
RUN go install -tags sqlite \
	github.com/gobuffalo/pop/soda

# Install genny (code-gen solution for generics in Go)
RUN go get github.com/CanDIG/genny
