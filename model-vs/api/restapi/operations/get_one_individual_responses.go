// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/CanDIG/go-model-service/model-vs/api/models"
)

// GetOneIndividualOKCode is the HTTP code returned for type GetOneIndividualOK
const GetOneIndividualOKCode int = 200

/*GetOneIndividualOK Return individual

swagger:response getOneIndividualOK
*/
type GetOneIndividualOK struct {

	/*
	  In: Body
	*/
	Payload *models.Individual `json:"body,omitempty"`
}

// NewGetOneIndividualOK creates GetOneIndividualOK with default headers values
func NewGetOneIndividualOK() *GetOneIndividualOK {

	return &GetOneIndividualOK{}
}

// WithPayload adds the payload to the get one individual o k response
func (o *GetOneIndividualOK) WithPayload(payload *models.Individual) *GetOneIndividualOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get one individual o k response
func (o *GetOneIndividualOK) SetPayload(payload *models.Individual) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOneIndividualOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetOneIndividualNotFoundCode is the HTTP code returned for type GetOneIndividualNotFound
const GetOneIndividualNotFoundCode int = 404

/*GetOneIndividualNotFound Individual not found

swagger:response getOneIndividualNotFound
*/
type GetOneIndividualNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetOneIndividualNotFound creates GetOneIndividualNotFound with default headers values
func NewGetOneIndividualNotFound() *GetOneIndividualNotFound {

	return &GetOneIndividualNotFound{}
}

// WithPayload adds the payload to the get one individual not found response
func (o *GetOneIndividualNotFound) WithPayload(payload *models.Error) *GetOneIndividualNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get one individual not found response
func (o *GetOneIndividualNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOneIndividualNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetOneIndividualInternalServerErrorCode is the HTTP code returned for type GetOneIndividualInternalServerError
const GetOneIndividualInternalServerErrorCode int = 500

/*GetOneIndividualInternalServerError Internal error

swagger:response getOneIndividualInternalServerError
*/
type GetOneIndividualInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetOneIndividualInternalServerError creates GetOneIndividualInternalServerError with default headers values
func NewGetOneIndividualInternalServerError() *GetOneIndividualInternalServerError {

	return &GetOneIndividualInternalServerError{}
}

// WithPayload adds the payload to the get one individual internal server error response
func (o *GetOneIndividualInternalServerError) WithPayload(payload *models.Error) *GetOneIndividualInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get one individual internal server error response
func (o *GetOneIndividualInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOneIndividualInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
