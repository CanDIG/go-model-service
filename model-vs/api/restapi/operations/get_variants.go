// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetVariantsHandlerFunc turns a function with the right signature into a get variants handler
type GetVariantsHandlerFunc func(GetVariantsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetVariantsHandlerFunc) Handle(params GetVariantsParams) middleware.Responder {
	return fn(params)
}

// GetVariantsHandler interface for that can handle valid get variants params
type GetVariantsHandler interface {
	Handle(GetVariantsParams) middleware.Responder
}

// NewGetVariants creates a new http.Handler for the get variants operation
func NewGetVariants(ctx *middleware.Context, handler GetVariantsHandler) *GetVariants {
	return &GetVariants{Context: ctx, Handler: handler}
}

/*GetVariants swagger:route GET /variants getVariants

Get all variants within genomic range

*/
type GetVariants struct {
	Context *middleware.Context
	Handler GetVariantsHandler
}

func (o *GetVariants) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetVariantsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
