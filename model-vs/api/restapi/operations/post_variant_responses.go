// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/CanDIG/go-model-service/model-vs/api/models"
)

// PostVariantCreatedCode is the HTTP code returned for type PostVariantCreated
const PostVariantCreatedCode int = 201

/*PostVariantCreated New variant created

swagger:response postVariantCreated
*/
type PostVariantCreated struct {
	/*

	 */
	Location string `json:"Location"`

	/*
	  In: Body
	*/
	Payload *models.Variant `json:"body,omitempty"`
}

// NewPostVariantCreated creates PostVariantCreated with default headers values
func NewPostVariantCreated() *PostVariantCreated {

	return &PostVariantCreated{}
}

// WithLocation adds the location to the post variant created response
func (o *PostVariantCreated) WithLocation(location string) *PostVariantCreated {
	o.Location = location
	return o
}

// SetLocation sets the location to the post variant created response
func (o *PostVariantCreated) SetLocation(location string) {
	o.Location = location
}

// WithPayload adds the payload to the post variant created response
func (o *PostVariantCreated) WithPayload(payload *models.Variant) *PostVariantCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post variant created response
func (o *PostVariantCreated) SetPayload(payload *models.Variant) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostVariantCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Location

	location := o.Location
	if location != "" {
		rw.Header().Set("Location", location)
	}

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostVariantMethodNotAllowedCode is the HTTP code returned for type PostVariantMethodNotAllowed
const PostVariantMethodNotAllowedCode int = 405

/*PostVariantMethodNotAllowed Forbidden to overwrite variant in put

swagger:response postVariantMethodNotAllowed
*/
type PostVariantMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostVariantMethodNotAllowed creates PostVariantMethodNotAllowed with default headers values
func NewPostVariantMethodNotAllowed() *PostVariantMethodNotAllowed {

	return &PostVariantMethodNotAllowed{}
}

// WithPayload adds the payload to the post variant method not allowed response
func (o *PostVariantMethodNotAllowed) WithPayload(payload *models.Error) *PostVariantMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post variant method not allowed response
func (o *PostVariantMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostVariantMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostVariantInternalServerErrorCode is the HTTP code returned for type PostVariantInternalServerError
const PostVariantInternalServerErrorCode int = 500

/*PostVariantInternalServerError Internal error - Variant not created

swagger:response postVariantInternalServerError
*/
type PostVariantInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostVariantInternalServerError creates PostVariantInternalServerError with default headers values
func NewPostVariantInternalServerError() *PostVariantInternalServerError {

	return &PostVariantInternalServerError{}
}

// WithPayload adds the payload to the post variant internal server error response
func (o *PostVariantInternalServerError) WithPayload(payload *models.Error) *PostVariantInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post variant internal server error response
func (o *PostVariantInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostVariantInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
