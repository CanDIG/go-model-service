// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetOneIndividualHandlerFunc turns a function with the right signature into a get one individual handler
type GetOneIndividualHandlerFunc func(GetOneIndividualParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetOneIndividualHandlerFunc) Handle(params GetOneIndividualParams) middleware.Responder {
	return fn(params)
}

// GetOneIndividualHandler interface for that can handle valid get one individual params
type GetOneIndividualHandler interface {
	Handle(GetOneIndividualParams) middleware.Responder
}

// NewGetOneIndividual creates a new http.Handler for the get one individual operation
func NewGetOneIndividual(ctx *middleware.Context, handler GetOneIndividualHandler) *GetOneIndividual {
	return &GetOneIndividual{Context: ctx, Handler: handler}
}

/*GetOneIndividual swagger:route GET /individuals/{individual_id} getOneIndividual

Get specific individual

*/
type GetOneIndividual struct {
	Context *middleware.Context
	Handler GetOneIndividualHandler
}

func (o *GetOneIndividual) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetOneIndividualParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
