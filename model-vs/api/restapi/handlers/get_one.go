// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/CanDIG/genny

package handlers

import (
	"github.com/CanDIG/go-model-service/model-vs/api/restapi/operations"

	"github.com/go-openapi/runtime/middleware"

	"github.com/CanDIG/go-model-service/model-vs/api/restapi/handlers/utilities"

	"github.com/CanDIG/go-model-service/model-vs/errors"

	apimodels "github.com/CanDIG/go-model-service/model-vs/api/models"
)

// GetOneIndividual returns the Individual in the database that corresponds to a given UUID.
func GetOneIndividual(params operations.GetOneIndividualParams) middleware.Responder {
	funcName := "handlers.GetOneIndividual"

	tx, errPayload := utilities.ConnectDevelopment(funcName)
	if errPayload != nil {
		return operations.NewGetOneIndividualInternalServerError().WithPayload(errPayload)
	}

	dataIndividual, err := utilities.GetIndividualByID(params.IndividualID.String(), tx)
	if err != nil {
		message := "This Individual cannot be found."
		errors.Log(err, 404, funcName, message)
		errPayload := &apimodels.Error{Code: 404001, Message: &message}
		return operations.NewGetOneIndividualNotFound().WithPayload(errPayload)
	}

	apiIndividual, errPayload := individualDataToAPIModel(*dataIndividual)
	if errPayload != nil {
		return operations.NewGetOneIndividualInternalServerError().WithPayload(errPayload)
	}

	return operations.NewGetOneIndividualOK().WithPayload(apiIndividual)
}

// GetOneVariant returns the Variant in the database that corresponds to a given UUID.
func GetOneVariant(params operations.GetOneVariantParams) middleware.Responder {
	funcName := "handlers.GetOneVariant"

	tx, errPayload := utilities.ConnectDevelopment(funcName)
	if errPayload != nil {
		return operations.NewGetOneVariantInternalServerError().WithPayload(errPayload)
	}

	dataVariant, err := utilities.GetVariantByID(params.VariantID.String(), tx)
	if err != nil {
		message := "This Variant cannot be found."
		errors.Log(err, 404, funcName, message)
		errPayload := &apimodels.Error{Code: 404001, Message: &message}
		return operations.NewGetOneVariantNotFound().WithPayload(errPayload)
	}

	apiVariant, errPayload := variantDataToAPIModel(*dataVariant)
	if errPayload != nil {
		return operations.NewGetOneVariantInternalServerError().WithPayload(errPayload)
	}

	return operations.NewGetOneVariantOK().WithPayload(apiVariant)
}

// GetOneCall returns the Call in the database that corresponds to a given UUID.
func GetOneCall(params operations.GetOneCallParams) middleware.Responder {
	funcName := "handlers.GetOneCall"

	tx, errPayload := utilities.ConnectDevelopment(funcName)
	if errPayload != nil {
		return operations.NewGetOneCallInternalServerError().WithPayload(errPayload)
	}

	dataCall, err := utilities.GetCallByID(params.CallID.String(), tx)
	if err != nil {
		message := "This Call cannot be found."
		errors.Log(err, 404, funcName, message)
		errPayload := &apimodels.Error{Code: 404001, Message: &message}
		return operations.NewGetOneCallNotFound().WithPayload(errPayload)
	}

	apiCall, errPayload := callDataToAPIModel(*dataCall)
	if errPayload != nil {
		return operations.NewGetOneCallInternalServerError().WithPayload(errPayload)
	}

	return operations.NewGetOneCallOK().WithPayload(apiCall)
}
