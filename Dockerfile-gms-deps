### This is Dockerfile builds the stack & dependencies for the go-model-service

# Build from project root and push to Docker Hub:
# 	docker login && ./push-image.sh -f ./Dockerfile-gms-deps -u <username> gms-deps <patch>
# Run resulting container from project root with:
# 	docker run -it --rm <username>/gms-deps

# Modify this line if you want to use a different stack-image
FROM golang as gms-deps

ENV GOPATH=/go

WORKDIR /go/src/github.com/CanDIG/go-model-service
COPY ./go.mod ./go.sum ./

# Use the mod tool to fetch/cache all project import dependencies into 
# 	$GOPATH/pkg/mod
RUN go mod download

# Install Go-swagger (code-gen of boilerplate server Go code from OpenAPI definition)
RUN go install "$GOPATH"/pkg/mod/github.com/go-swagger/go-swagger@v0.23.0/cmd/swagger

# Install genny (code-gen solution for generics in Go)
RUN go get github.com/CanDIG/genny

# Install pop (ORM-like for interfacing with the database backend)
# soda is the pop CLI
RUN go install "$GOPATH"/pkg/mod/github.com/gobuffalo/pop@v4.13.1+incompatible/soda

# Install Postgres client for interfacing with the database
RUN apt-get update &&\
	apt-get install -y postgresql-client

# Install shell script that tests and waits on the availability of a TCP port.
# Helps to manage container dependencies without using docker stack/swarm/kubernetes
# RUN cp "$GOPATH"/pkg/mod/github.com/vishnubob/wait-for-it@v0.0.0-20200205023206-c096cface5fb/wait-for-it.sh /usr/local/bin/wait-for-it
# RUN chmod +x /usr/local/bin/wait-for-it
