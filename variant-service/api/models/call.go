// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Call call
// swagger:model Call
type Call struct {

	// Creation time
	// Read Only: true
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// Additional call information
	// Max Length: 100
	// Min Length: 0
	Format *string `json:"format,omitempty"`

	// Called genotype
	// Required: true
	Genotype *string `json:"genotype"`

	// Unique internal identifier
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// Unique internal identifier for the subject
	// Required: true
	// Read Only: true
	// Format: uuid
	IndividualID strfmt.UUID `json:"individual_id"`

	// Unique internal identifier for the variant
	// Required: true
	// Read Only: true
	// Format: uuid
	VariantID strfmt.UUID `json:"variant_id"`
}

// Validate validates this call
func (m *Call) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenotype(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndividualID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariantID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Call) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Call) validateFormat(formats strfmt.Registry) error {

	if swag.IsZero(m.Format) { // not required
		return nil
	}

	if err := validate.MinLength("format", "body", string(*m.Format), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("format", "body", string(*m.Format), 100); err != nil {
		return err
	}

	return nil
}

func (m *Call) validateGenotype(formats strfmt.Registry) error {

	if err := validate.Required("genotype", "body", m.Genotype); err != nil {
		return err
	}

	return nil
}

func (m *Call) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Call) validateIndividualID(formats strfmt.Registry) error {

	if err := validate.Required("individual_id", "body", strfmt.UUID(m.IndividualID)); err != nil {
		return err
	}

	if err := validate.FormatOf("individual_id", "body", "uuid", m.IndividualID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Call) validateVariantID(formats strfmt.Registry) error {

	if err := validate.Required("variant_id", "body", strfmt.UUID(m.VariantID)); err != nil {
		return err
	}

	if err := validate.FormatOf("variant_id", "body", "uuid", m.VariantID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Call) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Call) UnmarshalBinary(b []byte) error {
	var res Call
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
