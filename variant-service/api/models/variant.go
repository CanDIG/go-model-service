// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Variant variant
// swagger:model Variant
type Variant struct {

	// Alternate (variant) bases
	// Required: true
	Alt *string `json:"alt"`

	// Chromosome that the variant occurs on
	// Required: true
	// Max Length: 10
	// Min Length: 1
	Chromosome *string `json:"chromosome"`

	// Unique internal identifier
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// Variant name, if any
	// Max Length: 100
	// Min Length: 0
	Name *string `json:"name,omitempty"`

	// Reference bases
	// Required: true
	Ref *string `json:"ref"`

	// Beginning location of variant
	// Required: true
	// Minimum: 1
	Start *int64 `json:"start"`
}

// Validate validates this variant
func (m *Variant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChromosome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Variant) validateAlt(formats strfmt.Registry) error {

	if err := validate.Required("alt", "body", m.Alt); err != nil {
		return err
	}

	return nil
}

func (m *Variant) validateChromosome(formats strfmt.Registry) error {

	if err := validate.Required("chromosome", "body", m.Chromosome); err != nil {
		return err
	}

	if err := validate.MinLength("chromosome", "body", string(*m.Chromosome), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("chromosome", "body", string(*m.Chromosome), 10); err != nil {
		return err
	}

	return nil
}

func (m *Variant) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Variant) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 100); err != nil {
		return err
	}

	return nil
}

func (m *Variant) validateRef(formats strfmt.Registry) error {

	if err := validate.Required("ref", "body", m.Ref); err != nil {
		return err
	}

	return nil
}

func (m *Variant) validateStart(formats strfmt.Registry) error {

	if err := validate.Required("start", "body", m.Start); err != nil {
		return err
	}

	if err := validate.MinimumInt("start", "body", int64(*m.Start), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Variant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Variant) UnmarshalBinary(b []byte) error {
	var res Variant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
