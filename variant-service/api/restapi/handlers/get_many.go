// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/mauricelam/genny

package handlers

import (
	"github.com/CanDIG/go-model-service/variant-service/api/restapi/operations"

	"github.com/go-openapi/runtime/middleware"

	"github.com/CanDIG/go-model-service/variant-service/errors"

	"github.com/CanDIG/go-model-service/variant-service/transformations"

	"github.com/CanDIG/go-model-service/variant-service/api/restapi/handlers/utilities"

	apimodels "github.com/CanDIG/go-model-service/variant-service/api/models"

	datamodels "github.com/CanDIG/go-model-service/variant-service/data/models"
)

// GetIndividuals returns all Individuals in the database given zero or more query parameters.
// The query parameters are handled separately in getIndividualsQuery.
func GetIndividuals(params operations.GetIndividualsParams) middleware.Responder {
	funcName := "handlers.GetIndividuals"

	tx, errPayload := utilities.ConnectDevelopment(funcName)
	if errPayload != nil {
		return operations.NewPostIndividualInternalServerError().WithPayload(errPayload)
	}

	query, errPayload := utilities.GetIndividualsQuery(params, tx)
	if errPayload != nil {
		return operations.NewPostIndividualInternalServerError().WithPayload(errPayload)
	}

	var dataIndividuals []datamodels.Individual
	err := query.All(&dataIndividuals)
	if err != nil {
		errors.Log(err, 500, funcName, "Problems getting Individuals from database")
		errPayload := errors.DefaultInternalServerError()
		return operations.NewGetIndividualsInternalServerError().WithPayload(errPayload)
	}

	var apiIndividuals []*apimodels.Individual
	for _, dataIndividual := range dataIndividuals {
		apiIndividual, errPayload := transformations.IndividualDataToAPIModel(dataIndividual)
		if errPayload != nil {
			return operations.NewGetIndividualsInternalServerError().WithPayload(errPayload)
		}
		apiIndividuals = append(apiIndividuals, apiIndividual)
	}

	return operations.NewGetIndividualsOK().WithPayload(apiIndividuals)
}

// GetVariants returns all Variants in the database given zero or more query parameters.
// The query parameters are handled separately in getVariantsQuery.
func GetVariants(params operations.GetVariantsParams) middleware.Responder {
	funcName := "handlers.GetVariants"

	tx, errPayload := utilities.ConnectDevelopment(funcName)
	if errPayload != nil {
		return operations.NewPostVariantInternalServerError().WithPayload(errPayload)
	}

	query, errPayload := utilities.GetVariantsQuery(params, tx)
	if errPayload != nil {
		return operations.NewPostVariantInternalServerError().WithPayload(errPayload)
	}

	var dataVariants []datamodels.Variant
	err := query.All(&dataVariants)
	if err != nil {
		errors.Log(err, 500, funcName, "Problems getting Variants from database")
		errPayload := errors.DefaultInternalServerError()
		return operations.NewGetVariantsInternalServerError().WithPayload(errPayload)
	}

	var apiVariants []*apimodels.Variant
	for _, dataVariant := range dataVariants {
		apiVariant, errPayload := transformations.VariantDataToAPIModel(dataVariant)
		if errPayload != nil {
			return operations.NewGetVariantsInternalServerError().WithPayload(errPayload)
		}
		apiVariants = append(apiVariants, apiVariant)
	}

	return operations.NewGetVariantsOK().WithPayload(apiVariants)
}
