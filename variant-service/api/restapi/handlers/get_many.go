// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/mauricelam/genny

package generics

import (
	"github.com/CanDIG/go-model-service/variant-service/api/restapi/operations"

	"github.com/go-openapi/runtime/middleware"

	"github.com/CanDIG/go-model-service/variant-service/errors"

	"github.com/CanDIG/go-model-service/variant-service/transformations"

	"github.com/CanDIG/go-model-service/variant-service/api/restapi/handlers/utilities"

	apimodels "github.com/CanDIG/go-model-service/variant-service/api/models"

	datamodels "github.com/CanDIG/go-model-service/variant-service/data/models"
)

// GetIndividuals returns all Individuals in the database given zero or more query parameters.
// The query parameters are handled separately in getindividualsQuery.
func GetIndividuals(params operations.GetindividualsParams) middleware.Responder {
	funcName := "handlers.Getindividuals"

	tx, errPayload := utilities.ConnectDevelopment(funcName)
	if errPayload != nil {
		return operations.NewPostindividualInternalServerError().WithPayload(errPayload)
	}

	query, errPayload := utilities.GetindividualsQuery(params, tx)
	if errPayload != nil {
		return operations.NewPostindividualInternalServerError().WithPayload(errPayload)
	}

	var dataindividuals []datamodels.Individual
	err := query.All(&dataindividuals)
	if err != nil {
		errors.Log(err, 500, funcName, "Problems getting Individuals from database")
		errPayload := errors.DefaultInternalServerError()
		return operations.NewGetindividualsInternalServerError().WithPayload(errPayload)
	}

	var apiindividuals []*apimodels.Individual
	for _, dataindividual := range dataindividuals {
		apiindividual, errPayload := transformations.individualDataToAPIModel(dataindividual)
		if errPayload != nil {
			return operations.NewGetindividualsInternalServerError().WithPayload(errPayload)
		}
		apiindividuals = append(apiindividuals, apiindividual)
	}

	return operations.NewGetindividualsOK().WithPayload(apiindividuals)
}

// GetVariants returns all Variants in the database given zero or more query parameters.
// The query parameters are handled separately in getvariantsQuery.
func GetVariants(params operations.GetvariantsParams) middleware.Responder {
	funcName := "handlers.Getvariants"

	tx, errPayload := utilities.ConnectDevelopment(funcName)
	if errPayload != nil {
		return operations.NewPostvariantInternalServerError().WithPayload(errPayload)
	}

	query, errPayload := utilities.GetvariantsQuery(params, tx)
	if errPayload != nil {
		return operations.NewPostvariantInternalServerError().WithPayload(errPayload)
	}

	var datavariants []datamodels.Variant
	err := query.All(&datavariants)
	if err != nil {
		errors.Log(err, 500, funcName, "Problems getting Variants from database")
		errPayload := errors.DefaultInternalServerError()
		return operations.NewGetvariantsInternalServerError().WithPayload(errPayload)
	}

	var apivariants []*apimodels.Variant
	for _, datavariant := range datavariants {
		apivariant, errPayload := transformations.variantDataToAPIModel(datavariant)
		if errPayload != nil {
			return operations.NewGetvariantsInternalServerError().WithPayload(errPayload)
		}
		apivariants = append(apivariants, apivariant)
	}

	return operations.NewGetvariantsOK().WithPayload(apivariants)
}
