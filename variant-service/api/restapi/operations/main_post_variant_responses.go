// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/CanDIG/go-model-service/variant-service/api/models"
)

// MainPostVariantCreatedCode is the HTTP code returned for type MainPostVariantCreated
const MainPostVariantCreatedCode int = 201

/*MainPostVariantCreated New variant created

swagger:response mainPostVariantCreated
*/
type MainPostVariantCreated struct {
	/*

	 */
	Location string `json:"Location"`

	/*
	  In: Body
	*/
	Payload *models.Variant `json:"body,omitempty"`
}

// NewMainPostVariantCreated creates MainPostVariantCreated with default headers values
func NewMainPostVariantCreated() *MainPostVariantCreated {

	return &MainPostVariantCreated{}
}

// WithLocation adds the location to the main post variant created response
func (o *MainPostVariantCreated) WithLocation(location string) *MainPostVariantCreated {
	o.Location = location
	return o
}

// SetLocation sets the location to the main post variant created response
func (o *MainPostVariantCreated) SetLocation(location string) {
	o.Location = location
}

// WithPayload adds the payload to the main post variant created response
func (o *MainPostVariantCreated) WithPayload(payload *models.Variant) *MainPostVariantCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the main post variant created response
func (o *MainPostVariantCreated) SetPayload(payload *models.Variant) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MainPostVariantCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Location

	location := o.Location
	if location != "" {
		rw.Header().Set("Location", location)
	}

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MainPostVariantBadRequestCode is the HTTP code returned for type MainPostVariantBadRequest
const MainPostVariantBadRequestCode int = 400

/*MainPostVariantBadRequest Variant provided in body does not pass schema validation

swagger:response mainPostVariantBadRequest
*/
type MainPostVariantBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewMainPostVariantBadRequest creates MainPostVariantBadRequest with default headers values
func NewMainPostVariantBadRequest() *MainPostVariantBadRequest {

	return &MainPostVariantBadRequest{}
}

// WithPayload adds the payload to the main post variant bad request response
func (o *MainPostVariantBadRequest) WithPayload(payload *models.Error) *MainPostVariantBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the main post variant bad request response
func (o *MainPostVariantBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MainPostVariantBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MainPostVariantMethodNotAllowedCode is the HTTP code returned for type MainPostVariantMethodNotAllowed
const MainPostVariantMethodNotAllowedCode int = 405

/*MainPostVariantMethodNotAllowed Forbidden to overwrite variant in put

swagger:response mainPostVariantMethodNotAllowed
*/
type MainPostVariantMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewMainPostVariantMethodNotAllowed creates MainPostVariantMethodNotAllowed with default headers values
func NewMainPostVariantMethodNotAllowed() *MainPostVariantMethodNotAllowed {

	return &MainPostVariantMethodNotAllowed{}
}

// WithPayload adds the payload to the main post variant method not allowed response
func (o *MainPostVariantMethodNotAllowed) WithPayload(payload *models.Error) *MainPostVariantMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the main post variant method not allowed response
func (o *MainPostVariantMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MainPostVariantMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// MainPostVariantInternalServerErrorCode is the HTTP code returned for type MainPostVariantInternalServerError
const MainPostVariantInternalServerErrorCode int = 500

/*MainPostVariantInternalServerError Internal error - Variant not created

swagger:response mainPostVariantInternalServerError
*/
type MainPostVariantInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewMainPostVariantInternalServerError creates MainPostVariantInternalServerError with default headers values
func NewMainPostVariantInternalServerError() *MainPostVariantInternalServerError {

	return &MainPostVariantInternalServerError{}
}

// WithPayload adds the payload to the main post variant internal server error response
func (o *MainPostVariantInternalServerError) WithPayload(payload *models.Error) *MainPostVariantInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the main post variant internal server error response
func (o *MainPostVariantInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *MainPostVariantInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
